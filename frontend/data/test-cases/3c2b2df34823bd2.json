{"uid":"3c2b2df34823bd2","name":"test_quick_consult","fullName":"frontend_tests.test_quick_consultation#test_quick_consult","historyId":"ce312f939aab2e83b743634a12148d24","time":{"start":1751961330006,"stop":1751961338463,"duration":8457},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"(//button[@type='button'])[3]\"}\n  (Session info: chrome=137.0.7151.119); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nStacktrace:\n#0 0x560d38db645a <unknown>\n#1 0x560d3885b760 <unknown>\n#2 0x560d388ad127 <unknown>\n#3 0x560d388ad321 <unknown>\n#4 0x560d388fbe94 <unknown>\n#5 0x560d388d2e7d <unknown>\n#6 0x560d388f930b <unknown>\n#7 0x560d388d2c23 <unknown>\n#8 0x560d3889f4a5 <unknown>\n#9 0x560d388a0111 <unknown>\n#10 0x560d38d7af1b <unknown>\n#11 0x560d38d7ee19 <unknown>\n#12 0x560d38d61ac9 <unknown>\n#13 0x560d38d7f9c8 <unknown>\n#14 0x560d38d4634f <unknown>\n#15 0x560d38da3a28 <unknown>\n#16 0x560d38da3c06 <unknown>\n#17 0x560d38db5336 <unknown>\n#18 0x7f954ee9caa4 <unknown>\n#19 0x7f954ef29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d5a295c8727d56c17bf6724e83f1cd8a\")>\n\n    @pytest.mark.frontend\n    def test_quick_consult(driver):\n        perform_login(driver)\n        # Step 3: Navigate to Quick Consultation (update selector as needed)\n>       quick_consult_button = driver.find_element(By.XPATH, \"(//button[@type='button'])[3]\")\n\nfrontend_tests/test_quick_consultation.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fde521cdbd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x560d38db5336 \\\\u003Cunknown>\\\\n#18 0x7f954ee9caa4 \\\\u003Cunknown>\\\\n#19 0x7f954ef29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"(//button[@type='button'])[3]\"}\nE         (Session info: chrome=137.0.7151.119); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       #0 0x560d38db645a <unknown>\nE       #1 0x560d3885b760 <unknown>\nE       #2 0x560d388ad127 <unknown>\nE       #3 0x560d388ad321 <unknown>\nE       #4 0x560d388fbe94 <unknown>\nE       #5 0x560d388d2e7d <unknown>\nE       #6 0x560d388f930b <unknown>\nE       #7 0x560d388d2c23 <unknown>\nE       #8 0x560d3889f4a5 <unknown>\nE       #9 0x560d388a0111 <unknown>\nE       #10 0x560d38d7af1b <unknown>\nE       #11 0x560d38d7ee19 <unknown>\nE       #12 0x560d38d61ac9 <unknown>\nE       #13 0x560d38d7f9c8 <unknown>\nE       #14 0x560d38d4634f <unknown>\nE       #15 0x560d38da3a28 <unknown>\nE       #16 0x560d38da3c06 <unknown>\nE       #17 0x560d38db5336 <unknown>\nE       #18 0x7f954ee9caa4 <unknown>\nE       #19 0x7f954ef29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751961329675,"stop":1751961330006,"duration":331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1751961338488,"stop":1751961338550,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"frontend"},{"name":"parentSuite","value":"frontend_tests"},{"name":"suite","value":"test_quick_consultation"},{"name":"host","value":"pkrvmbietmlfzoi"},{"name":"thread","value":"3219-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"frontend_tests.test_quick_consultation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["frontend"]},"source":"3c2b2df34823bd2.json","parameterValues":[]}